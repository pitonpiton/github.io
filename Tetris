<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Tetris</title>
  <link href="tetris.css" rel="stylesheet">
  
  
  <style>
    
    * {
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;

    }

   .main {
      margin: 50px auto;
      position: relative;
      overflow: hidden;
      width: 500px;
      height: 700px;
      border: 1px solid #000; 
    }

.tetris {
  width: 500px;
  height: 900px;
  display: flex;
  overflow: hidden;
  flex-wrap: wrap;
  position: absolute;
  bottom: 0;
  background-color: #fff;
}

.excel {
  width: 50px;
  height: 50px;
  border: 1px solid #ccc;
}

.figure, .set {
  background-color: #1e488c;
}

input {
  display: block;
  margin: 30px auto;
  font-size: 30px auto;
  padding: 10px;
}

.controls {
  padding: 20px;
  position: absolute;
  top: 200px;
  right: 200px;

}
.modal {
  position: fixed;
  text-transform: uppercase;
  width: 500px;
  height: 500px;
  top: 50%;
  left: 50%;
  transform: translate(50%, 50%);
  background-color: #fff;
  z-index: 3;
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  border-radius: 20px;
}
.button {
  border: 2px solid #1e488c;
  width: 300px;
  text-align: center;
  margin-bottom: 20px;
  padding: 30px 0;
  cursor: pointer;
  font-size: 25px;
  transition: all .3s;
}
.button:hover {
  border-radius: 40px;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  background-color: #1e488c;
}

  </style>
  
  <script>
    
    let overlay = document.querySelector('.overlay');
    let modal = document.querySelector('.modal');
    let speed = 0;
    
    modal.addEventListener('click', function (e) {
      if (e.target.classList.contains('easy')) {
        speed = 1000;
      } else if (e.target.classList.contains('normal')) {
        speed = 500;
      } else if (e.target.classList.contains('hard')) {
        speed = 200;
      }

      if (e.target.classList.contains('button')) {
        modal.style.display = 'none';
        overlay.style.display = 'none';
        startGame();
      }
    });
    
    function startGame () {
    let tetris = document.createElement('div');
        tetris.classList.add('tetris');

    for (let i = 1; i < 181; i++) {
        let excel = document.createElement('div');
        excel.classList.add('excel');
        tetris.appendChild(excel);
    }

    let main = getElementsByClassName('main')[0];
        main.appendChild(tetris);

    let excel = getElementsByClassName('excel');
    let i = 0;
//Теперь пройдемся по всем рядам нашего цикла начиная с последнего
    for (let y = 18; y > 0; y--) {
      // Внутри цикла вложем еще один, с помощью которого пройдемся по оси х
        for (let x = 1; x < 11; x++) {
            excel[i].setAttribute('posX', x);
            excel[i].setAttribute('posY', y);
            i++;
        
        }  
    }

let x = 5, y = 15; //Координаты первой ячейки
let mainArr = [
  // палка
  [
    [0,1],
    [0,2],
    [0,3],
    
    // Поворот на 90 градусов
    [
      [-1,1],
      [0,0],
      [1,-1],
      [2,-2],
    ],
    
    // Поворот на 180 градусов
    [
      [1,-1],
      [0,0],
      [-1,1],
      [-2,2],
    ],

     // Поворот на 270 градусов
     [
      [-1,1],
      [0,0],
      [1,-1],
      [2,-2],
    ],
    
    // Поворот на 360 градусов
    [
      [1,-1],
      [0,0],
      [-1,1],
      [-2,2],
    ],


  ],
  
  //Квадрат
  [
    [1,0],
    [0,1],
    [1,1],

    // Поворот на 90 градусов
    [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
    ],
    
    // Поворот на 180 градусов
    [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
    ],

     // Поворот на 270 градусов
     [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
    ],
    
    // Поворот на 360 градусов
    [
      [0,0],
      [0,0],
      [0,0],
      [0,0],
    ],
  ],
  
  //Буква L
  [
    [1,0],
    [0,1],
    [0,2],

     // Поворот на 90 градусов
    [
      [0,0],
      [-1,1],
      [1,0],
      [2,-1],
    ],
    
     // Поворот на 180 градусов
    [
      [1,-1],
      [1,-1],
      [-1,0],
      [-1,0],
    ],

     // Поворот на 270 градусов
     [
      [-1,0],
      [0,-1],
      [2,-2],
      [1,-1],
    ],
    
    // Поворот на 360 градусов
    [
      [0,-1],
      [0,-1],
      [-2,0],
      [-2,0],
    ]
  ],
  
  // Зеркальный брат L
  [
    [1,0],
    [1,1],
    [1,2],

    // Поворот на 90 градусов
    [
      [0,0],
      [0,0],
      [1,-1],
      [-1,-1],
    ],
    
    // Поворот на 180 градусов
    [
      [0,-1],
      [-1,0],
      [-2,1],
      [1,0],
    ],

     // Поворот на 270 градусов
     [
      [2,0],
      [0,0],
      [1,-1],
      [1,-1],
    ],
    
    // Поворот на 360 градусов
    [
      [-2,0],
      [1,-1],
      [0,0],
      [-1,1],
    ],
  ],
  
  // Молния вправо
  [
    [1,0],
    [-1,1],
    [0,1],
    
    // Поворот на 90 градусов
    [
      [0,-1],
      [-1,0],
      [2,-1],
      [1,0],
    ],
    
    // Поворот на 180 градусов
    [
      [0,0],
      [1,-1],
      [-2,0],
      [-1,-1],
    ],

     // Поворот на 270 градусов
     [
      [0,-1],
      [-1,0],
      [2,-1],
      [1,0],
    ],
    
    // Поворот на 360 градусов
    [
      [0,0],
      [1,-1],
      [-2,0],
      [-1,-1],
    ],

  ],
  
  // Молния влево
  [
    [1,0],
    [1,1],
    [2,1],

     // Поворот на 90 градусов
     [
      [2,-1],
      [0,0],
      [1,-1],
      [-1,0],
    ],
    
    // Поворот на 180 градусов
    [
      [-2,0],
      [0,-1],
      [-1,0],
      [1,-1],
    ],

     // Поворот на 270 градусов
     [
      [2,-1],
      [0,0],
      [1,-1],
      [-1,0],
    ],
    
    // Поворот на 360 градусов
    [
      [-2,0],
      [0,-1],
      [-1,0],
      [1,-1],
    ],
  ],
  
  // Деталь лего
  [
    [1,0],
    [2,0],
    [1,1],

     // Поворот на 90 градусов
     [
      [1,-1],
      [0,0],
      [0,0],
      [0,0],
    ],
    
    // Поворот на 180 градусов
    [
      [0,0],
      [-1,0],
      [-1,0],
      [1,-1],
    ],

     // Поворот на 270 градусов
     [
      [1,-1],
      [1,-1],
      [1,-1],
      [0,0],
    ],
    
    // Поворот на 360 градусов
    [
      [-2,0],
      [0,-1],
      [0,-1],
      [-1,-1],
    ],
    
  ],

]
//Создадим функцию создания фигуры

let currentFigure = 0; //Создаем вспомогательную переменную
let figureBody = 0; //Создаем вспомогательную переменную
let rotate = 1; //Переменная для вращения фигурками

function create() {
  function getRandom() {
    return Math.round(Math.random() * (mainArr.length - 1))
  }

  rotate = 1;

  currentFigure = getRandom(); 
  
  figureBody = [
      document.querySelector(`[posX = "${(x)}"][posY = "${(y)}"]`), // Первый ячейка нашей фигуры. Команда означает, что первым элементом нашей фигуры будет ячейка с координатами let x = 5, y = 10;
      document.querySelector(`[posX = "${(x + mainArr[currentFigure][0][0])}"][posY = "${(y + mainArr[currentFigure][0][1])}"]`),// Вторая ячейка
      document.querySelector(`[posX = "${(x + mainArr[currentFigure][1][0])}"][posY = "${(y + mainArr[currentFigure][1][1])}"]`),// Третья ячейка
      document.querySelector(`[posX = "${(x + mainArr[currentFigure][2][0])}"][posY = "${(y + mainArr[currentFigure][2][1])}"]`),// Четвертая ячейка
      
  ]

  for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.add('figure');
  }
} //Функция создания рандомных значений


create(); 

let score = 0;
let input = document.getElementsByTagName('input')[0];
input.value = `Ваши очки: ${score}`;

function move() {
  let moveFlag = true; // Если эта переменная равна true, то наша деталька движеться еще на ряд вниз, если нет, то мы фиксируем положение нашей детальки либо на самом нижнем ряду и тогда создаем движение новой детальки, либо на верху касание и тогда игра проиграна
  let coordinates = [
    [figureBody[0].getAttribute('posX'), [figureBody[0].getAttribute('posY')]],
    [figureBody[1].getAttribute('posX'), [figureBody[1].getAttribute('posY')]],
    [figureBody[2].getAttribute('posX'), [figureBody[2].getAttribute('posY')]],
    [figureBody[3].getAttribute('posX'), [figureBody[3].getAttribute('posY')]],

  ];  // Переменная создает фигуру-детальку с координатами своих частей
  
  // Сейчас проверим может ли фигура наша падать дальше в разных случаях
  
  for (let i = 0; i < coordinates.length; i++) {
      if (coordinates [i][1] == 1 || document.querySelector(`[posX = "${coordinates[i][0]}"][posY = "${coordinates[i][1] - 1}"]`).classList.contains('set')) {
        moveFlag = false;
        break;
      }
  }
  if (moveFlag == true) {
    for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.remove('figure');
    }
    figureBody = [
        document.querySelector(`[posX = "${coordinates[0][0]}"][posY = "${coordinates[0][1] - 1}"]`),
        document.querySelector(`[posX = "${coordinates[1][0]}"][posY = "${coordinates[1][1] - 1}"]`),
        document.querySelector(`[posX = "${coordinates[2][0]}"][posY = "${coordinates[2][1] - 1}"]`),
        document.querySelector(`[posX = "${coordinates[3][0]}"][posY = "${coordinates[3][1] - 1}"]`),
        ];
    for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.add('figure');
    }
  } else {
      for (let i = 0; i < figureBody.length; i++) {
        figureBody[i].classList.remove('figure');
        figureBody[i].classList.add('set');
        
      }
      
      for (let i = 1; i < 15; i++) {
        let count = 0;
        for (let k = 1; k < 11; k++) {
          if (document.querySelector(`[posX = "${k}"][posY = "${i}"]`).classList.contains('set')) {
            count++;
            if (count == 10) {
              score += 10;
              input.value = `Ваши очки: ${score}`;
              for (let m = 1; m < 11; m++) {
                document.querySelector(`[posX = "${m}"][posY = "${i}"]`).classList.remove('set');
              }

              let set = document.querySelectorAll('.set');
              let newSet = [];
              for (let s = 0; s < set.length; s++) {
                let setCoordinates = [set[s].getAttribute('posX'), set[s].getAttribute('posY')];
                if (setCoordinates[1] > i) {
                  set[s].classList.remove('set');
                  newSet.push(document.querySelector(`[posX = "${setCoordinates[0]}"][posY = "${setCoordinates[1] - 1}"]`));
                }
              }

              for (let a = 0; a < newSet.length; a++) {
                newSet[a].classList.add('set');
              }
              i--;


            }
          }
        }
      }
      
      for (let n = 1; n < 11; n++) {
          if (document.querySelector(`[posX = "${n}"][posY = "${15}"]`).classList.contains('set')) {
            clearInterval(interval);
            alert(`Game over! Ваши очки: ${score}`);
            break;
            
          }
      }

      create();
    }
}

let interval = setInterval(() => {
  move();
}, speed); // Это значит, что мы запустили интервал, который будет запускать нашу функцию move()  каждые 300 мсек

let flag = true;

window.addEventListener('keydown', function(e) {
  
  let coordinates1 = [figureBody[0].getAttribute('posX'), figureBody[0].getAttribute('posY')];
  let coordinates2 = [figureBody[1].getAttribute('posX'), figureBody[1].getAttribute('posY')];
  let coordinates3 = [figureBody[2].getAttribute('posX'), figureBody[2].getAttribute('posY')];
  let coordinates4 = [figureBody[3].getAttribute('posX'), figureBody[3].getAttribute('posY')];

  function getNewState(a) {

    flag = true;
    
    let figureNew = [
      
      document.querySelector(`[posX = "${+coordinates1[0] + a}"][posY = "${coordinates1[1]}"]`),
      document.querySelector(`[posX = "${+coordinates2[0] + a}"][posY = "${coordinates2[1]}"]`),
      document.querySelector(`[posX = "${+coordinates3[0] + a}"][posY = "${coordinates3[1]}"]`),
      document.querySelector(`[posX = "${+coordinates4[0] + a}"][posY = "${coordinates4[1]}"]`),

    ];

    for (let i = 0; i < figureNew.length; i++) {
      
      if (figureNew[i] || figureNew[i].classList.contains('set')) {
        flag = false;
      }

      if (flag == true) {
        for (let i = 0; i < figureBody.length; i++) {
          figureBody[i].classList.remove('figure');
        }

        figureBody = figureNew;
        
        for (let i = 0; i < figureBody.length; i++) {
          figureBody[i].classList.add('figure');
        }
      }
    }
  
  }
  
  if (e.keyCode == 37) {
    getNewState(-1);
  } else if (e.keyCode == 39) {
    getNewState(1);
  } else if (e.keyCode == 40) {
    move();
  } else if (e.keyCode == 38) {
    flag = true;
    
    let figureNew = [
      
      document.querySelector(`[posX = "${+coordinates1[0] + mainArr[currentFigure][rotate + 2][0][0]}"][posY = "${+coordinates1[1] + mainArr[currentFigure][rotate + 2][0][1]}"]`),
      document.querySelector(`[posX = "${+coordinates2[0] + mainArr[currentFigure][rotate + 2][1][0]}"][posY = "${+coordinates2[1] + mainArr[currentFigure][rotate + 2][1][1]}"]`),
      document.querySelector(`[posX = "${+coordinates3[0] + mainArr[currentFigure][rotate + 2][2][0]}"][posY = "${+coordinates3[1] + mainArr[currentFigure][rotate + 2][2][1]}"]`),
      document.querySelector(`[posX = "${+coordinates4[0] + mainArr[currentFigure][rotate + 2][3][0]}"][posY = "${+coordinates4[1] + mainArr[currentFigure][rotate + 2][3][1]}"]`),

    ];

    for (let i = 0; i < figureNew.length; i++) {
      
      if (figureNew[i] || figureNew[i].classList.contains('set')) {
        flag = false;
      }

      if (flag == true) {
        for (let i = 0; i < figureBody.length; i++) {
          figureBody[i].classList.remove('figure');
        }

        figureBody = figureNew;
        
        for (let i = 0; i < figureBody.length; i++) {
          figureBody[i].classList.add('figure');
        }

        if (rotate < 4) {
          rotate++;  
        } else {
          rotate = 1;
        }
      }
    }
  }

})

}  

  </script>

</head>

<body>
  <div class="main" class="tetris">
  
  </div>
  
  <input type="text" readonly>

  <div>
    <h> Управление </h>
    <p>Вправо - стрелка вправо</p>
    <p>Влево - стрелка влево</p>
    <p>Поворот - стрелка вверх</p>
    <p>Ускорение - стрелка вниз</p>
  </div>

  <div class="overlay"></div>

  <div class="modal"> 
    <h2>Выберите уровень сложности</h2>
    <div class="button easy">Easy</div>
    <div class="button normal">Normal</div>
    <div class="button hard">Hard</div>
  </div>
  <script src="tetris.js"></script>

</body>
</html>
